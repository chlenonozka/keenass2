{"ast":null,"code":"import { makeAutoObservable, runInAction } from 'mobx';\nimport http from '../api/http';\nexport class UsersStore {\n  constructor() {\n    this.list = [];\n    this.isLoading = false;\n    this.error = null;\n    this.processing = new Set();\n    makeAutoObservable(this);\n  }\n  isProcessing(id) {\n    return this.processing.has(id);\n  }\n  setProcessing(id, on) {\n    if (on) this.processing.add(id);else this.processing.delete(id);\n  }\n  async fetch() {\n    this.isLoading = true;\n    this.error = null;\n    try {\n      const {\n        data\n      } = await http.get('/users');\n      runInAction(() => this.list = data);\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        return this.error = (e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || 'Не удалось получить пользователей';\n      });\n      throw e;\n    } finally {\n      runInAction(() => this.isLoading = false);\n    }\n  }\n  async setBlocked(userId, isBlocked) {\n    this.setProcessing(userId, true);\n    try {\n      const {\n        data\n      } = await http.patch(`/users/${userId}`, {\n        isBlocked\n      });\n      runInAction(() => {\n        this.list = this.list.map(u => u.id === userId ? data : u);\n      });\n    } finally {\n      this.setProcessing(userId, false);\n    }\n  }\n  async setRole(userId, role) {\n    this.setProcessing(userId, true);\n    try {\n      const {\n        data\n      } = await http.patch(`/users/${userId}`, {\n        role\n      });\n      runInAction(() => {\n        this.list = this.list.map(u => u.id === userId ? data : u);\n      });\n    } finally {\n      this.setProcessing(userId, false);\n    }\n  }\n  async softDelete(userId) {\n    this.setProcessing(userId, true);\n    try {\n      const payload = {\n        isDeleted: true,\n        deletedAt: new Date().toISOString()\n      };\n      const {\n        data\n      } = await http.patch(`/users/${userId}`, payload);\n      runInAction(() => {\n        this.list = this.list.map(u => u.id === userId ? data : u);\n      });\n    } finally {\n      this.setProcessing(userId, false);\n    }\n  }\n  async restore(userId) {\n    this.setProcessing(userId, true);\n    try {\n      const payload = {\n        isDeleted: false,\n        deletedAt: null\n      };\n      const {\n        data\n      } = await http.patch(`/users/${userId}`, payload);\n      runInAction(() => {\n        this.list = this.list.map(u => u.id === userId ? data : u);\n      });\n    } finally {\n      this.setProcessing(userId, false);\n    }\n  }\n  async hardDelete(userId) {\n    this.setProcessing(userId, true);\n    try {\n      await http.delete(`/users/${userId}`);\n      runInAction(() => {\n        this.list = this.list.filter(u => u.id !== userId);\n      });\n    } finally {\n      this.setProcessing(userId, false);\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","http","UsersStore","constructor","list","isLoading","error","processing","Set","isProcessing","id","has","setProcessing","on","add","delete","fetch","data","get","e","_e$response","_e$response$data","response","message","setBlocked","userId","isBlocked","patch","map","u","setRole","role","softDelete","payload","isDeleted","deletedAt","Date","toISOString","restore","hardDelete","filter"],"sources":["C:/praka/www/media/src/stores/users.store.ts"],"sourcesContent":["import { makeAutoObservable, runInAction } from 'mobx'\r\nimport http from '../api/http'\r\nimport type { ID, User, UserRole } from '../types'\r\n\r\nexport class UsersStore {\r\n  list: User[] = []\r\n  isLoading = false\r\n  error: string | null = null\r\n\r\n  private processing = new Set<ID>()\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n  isProcessing(id: ID) {\r\n    return this.processing.has(id)\r\n  }\r\n  private setProcessing(id: ID, on: boolean) {\r\n    if (on) this.processing.add(id)\r\n    else this.processing.delete(id)\r\n  }\r\n\r\n  async fetch() {\r\n    this.isLoading = true\r\n    this.error = null\r\n    try {\r\n      const { data } = await http.get<User[]>('/users')\r\n      runInAction(() => (this.list = data))\r\n    } catch (e: any) {\r\n      runInAction(() => (this.error = e?.response?.data?.message || 'Не удалось получить пользователей'))\r\n      throw e\r\n    } finally {\r\n      runInAction(() => (this.isLoading = false))\r\n    }\r\n  }\r\n\r\n  async setBlocked(userId: ID, isBlocked: boolean) {\r\n    this.setProcessing(userId, true)\r\n    try {\r\n      const { data } = await http.patch<User>(`/users/${userId}`, { isBlocked })\r\n      runInAction(() => {\r\n        this.list = this.list.map(u => (u.id === userId ? data : u))\r\n      })\r\n    } finally {\r\n      this.setProcessing(userId, false)\r\n    }\r\n  }\r\n\r\n  async setRole(userId: ID, role: UserRole) {\r\n    this.setProcessing(userId, true)\r\n    try {\r\n      const { data } = await http.patch<User>(`/users/${userId}`, { role })\r\n      runInAction(() => {\r\n        this.list = this.list.map(u => (u.id === userId ? data : u))\r\n      })\r\n    } finally {\r\n      this.setProcessing(userId, false)\r\n    }\r\n  }\r\n\r\n  async softDelete(userId: ID) {\r\n    this.setProcessing(userId, true)\r\n    try {\r\n      const payload = { isDeleted: true, deletedAt: new Date().toISOString() }\r\n      const { data } = await http.patch<User>(`/users/${userId}`, payload)\r\n      runInAction(() => {\r\n        this.list = this.list.map(u => (u.id === userId ? data : u))\r\n      })\r\n    } finally {\r\n      this.setProcessing(userId, false)\r\n    }\r\n  }\r\n\r\n  async restore(userId: ID) {\r\n    this.setProcessing(userId, true)\r\n    try {\r\n      const payload = { isDeleted: false, deletedAt: null }\r\n      const { data } = await http.patch<User>(`/users/${userId}`, payload as any)\r\n      runInAction(() => {\r\n        this.list = this.list.map(u => (u.id === userId ? data : u))\r\n      })\r\n    } finally {\r\n      this.setProcessing(userId, false)\r\n    }\r\n  }\r\n\r\n  async hardDelete(userId: ID) {\r\n    this.setProcessing(userId, true)\r\n    try {\r\n      await http.delete<void>(`/users/${userId}`)\r\n      runInAction(() => {\r\n        this.list = this.list.filter(u => u.id !== userId)\r\n      })\r\n    } finally {\r\n      this.setProcessing(userId, false)\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}