{"ast":null,"code":"import { makeAutoObservable, runInAction } from 'mobx';\nimport http from '../api/http';\nexport class UsersStore {\n  constructor() {\n    this.list = [];\n    this.isLoading = false;\n    this.error = null;\n    makeAutoObservable(this);\n  }\n  async fetch() {\n    this.isLoading = true;\n    this.error = null;\n    try {\n      const {\n        data\n      } = await http.get('/users');\n      runInAction(() => this.list = data);\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        return this.error = (e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || 'Не удалось получить пользователей';\n      });\n      throw e;\n    } finally {\n      runInAction(() => this.isLoading = false);\n    }\n  }\n  async setBlocked(userId, isBlocked) {\n    const {\n      data\n    } = await http.patch(`/users/${userId}`, {\n      isBlocked\n    });\n    runInAction(() => {\n      this.list = this.list.map(u => u.id === userId ? data : u);\n    });\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","http","UsersStore","constructor","list","isLoading","error","fetch","data","get","e","_e$response","_e$response$data","response","message","setBlocked","userId","isBlocked","patch","map","u","id"],"sources":["C:/praka/www/media/src/stores/users.store.ts"],"sourcesContent":["import { makeAutoObservable, runInAction } from 'mobx'\r\nimport http from '../api/http'\r\nimport type { ID, User } from '../types'\r\n\r\nexport class UsersStore {\r\n  list: User[] = []\r\n  isLoading = false\r\n  error: string | null = null\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  async fetch() {\r\n    this.isLoading = true\r\n    this.error = null\r\n    try {\r\n      const { data } = await http.get<User[]>('/users')\r\n      runInAction(() => (this.list = data))\r\n    } catch (e: any) {\r\n      runInAction(() => (this.error = e?.response?.data?.message || 'Не удалось получить пользователей'))\r\n      throw e\r\n    } finally {\r\n      runInAction(() => (this.isLoading = false))\r\n    }\r\n  }\r\n\r\n  async setBlocked(userId: ID, isBlocked: boolean) {\r\n    const { data } = await http.patch<User>(`/users/${userId}`, { isBlocked })\r\n    runInAction(() => {\r\n      this.list = this.list.map(u => (u.id === userId ? data : u))\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,WAAW,QAAQ,MAAM;AACtD,OAAOC,IAAI,MAAM,aAAa;AAG9B,OAAO,MAAMC,UAAU,CAAC;EAKtBC,WAAWA,CAAA,EAAG;IAAA,KAJdC,IAAI,GAAW,EAAE;IAAA,KACjBC,SAAS,GAAG,KAAK;IAAA,KACjBC,KAAK,GAAkB,IAAI;IAGzBP,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEA,MAAMQ,KAAKA,CAAA,EAAG;IACZ,IAAI,CAACF,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI;MACF,MAAM;QAAEE;MAAK,CAAC,GAAG,MAAMP,IAAI,CAACQ,GAAG,CAAS,QAAQ,CAAC;MACjDT,WAAW,CAAC,MAAO,IAAI,CAACI,IAAI,GAAGI,IAAK,CAAC;IACvC,CAAC,CAAC,OAAOE,CAAM,EAAE;MACfV,WAAW,CAAC;QAAA,IAAAW,WAAA,EAAAC,gBAAA;QAAA,OAAO,IAAI,CAACN,KAAK,GAAG,CAAAI,CAAC,aAADA,CAAC,wBAAAC,WAAA,GAADD,CAAC,CAAEG,QAAQ,cAAAF,WAAA,wBAAAC,gBAAA,GAAXD,WAAA,CAAaH,IAAI,cAAAI,gBAAA,uBAAjBA,gBAAA,CAAmBE,OAAO,KAAI,mCAAmC;MAAA,CAAC,CAAC;MACnG,MAAMJ,CAAC;IACT,CAAC,SAAS;MACRV,WAAW,CAAC,MAAO,IAAI,CAACK,SAAS,GAAG,KAAM,CAAC;IAC7C;EACF;EAEA,MAAMU,UAAUA,CAACC,MAAU,EAAEC,SAAkB,EAAE;IAC/C,MAAM;MAAET;IAAK,CAAC,GAAG,MAAMP,IAAI,CAACiB,KAAK,CAAO,UAAUF,MAAM,EAAE,EAAE;MAAEC;IAAU,CAAC,CAAC;IAC1EjB,WAAW,CAAC,MAAM;MAChB,IAAI,CAACI,IAAI,GAAG,IAAI,CAACA,IAAI,CAACe,GAAG,CAACC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,MAAM,GAAGR,IAAI,GAAGY,CAAE,CAAC;IAC9D,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}