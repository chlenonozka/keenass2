{"ast":null,"code":"var _jsxFileName = \"C:\\\\praka\\\\www\\\\media\\\\src\\\\stores\\\\root.store.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { makeAutoObservable, reaction } from 'mobx';\nimport { AuthStore } from './auth.store';\nimport { UsersStore } from './users.store';\nimport { PostsStore } from './posts.store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class RootStore {\n  constructor() {\n    this.auth = void 0;\n    this.users = void 0;\n    this.posts = void 0;\n    this.auth = new AuthStore(this);\n    this.users = new UsersStore();\n    this.posts = new PostsStore(this.auth);\n\n    // Реакция на изменение аватара пользователя\n    reaction(() => {\n      var _this$auth$user;\n      return (_this$auth$user = this.auth.user) === null || _this$auth$user === void 0 ? void 0 : _this$auth$user.avatarUrl;\n    }, (newAvatarUrl, oldAvatarUrl) => {\n      if (newAvatarUrl && newAvatarUrl !== oldAvatarUrl && this.auth.user) {\n        console.log('Аватар изменился, обновляем кэш постов и комментариев');\n        this.posts.refreshAvatarInCache(this.auth.user.id, newAvatarUrl);\n      }\n    });\n    makeAutoObservable(this);\n  }\n}\nconst RootStoreContext = /*#__PURE__*/createContext(null);\nconst root = new RootStore();\nexport const RootStoreProvider = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(RootStoreContext.Provider, {\n  value: root,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 3\n}, this);\n_c = RootStoreProvider;\nexport const useRootStore = () => {\n  _s();\n  const ctx = useContext(RootStoreContext);\n  if (!ctx) throw new Error('RootStoreProvider is missing');\n  return ctx;\n};\n_s(useRootStore, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"RootStoreProvider\");","map":{"version":3,"names":["React","createContext","useContext","makeAutoObservable","reaction","AuthStore","UsersStore","PostsStore","jsxDEV","_jsxDEV","RootStore","constructor","auth","users","posts","_this$auth$user","user","avatarUrl","newAvatarUrl","oldAvatarUrl","console","log","refreshAvatarInCache","id","RootStoreContext","root","RootStoreProvider","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRootStore","_s","ctx","Error","$RefreshReg$"],"sources":["C:/praka/www/media/src/stores/root.store.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react'\r\nimport { makeAutoObservable, reaction } from 'mobx'\r\nimport { AuthStore } from './auth.store'\r\nimport { UsersStore } from './users.store'\r\nimport { PostsStore } from './posts.store'\r\n\r\nexport class RootStore {\r\n  auth: AuthStore\r\n  users: UsersStore\r\n  posts: PostsStore\r\n\r\n  constructor() {\r\n    this.auth = new AuthStore(this)\r\n    this.users = new UsersStore()\r\n    this.posts = new PostsStore(this.auth)\r\n\r\n    // Реакция на изменение аватара пользователя\r\n    reaction(\r\n      () => this.auth.user?.avatarUrl,\r\n      (newAvatarUrl, oldAvatarUrl) => {\r\n        if (newAvatarUrl && newAvatarUrl !== oldAvatarUrl && this.auth.user) {\r\n          console.log('Аватар изменился, обновляем кэш постов и комментариев')\r\n          this.posts.refreshAvatarInCache(this.auth.user.id, newAvatarUrl)\r\n        }\r\n      }\r\n    )\r\n\r\n    makeAutoObservable(this)\r\n  }\r\n}\r\n\r\nconst RootStoreContext = createContext<RootStore | null>(null)\r\nconst root = new RootStore()\r\n\r\nexport const RootStoreProvider: React.FC<React.PropsWithChildren> = ({ children }) => (\r\n  <RootStoreContext.Provider value={root}>{children}</RootStoreContext.Provider>\r\n)\r\n\r\nexport const useRootStore = () => {\r\n  const ctx = useContext(RootStoreContext)\r\n  if (!ctx) throw new Error('RootStoreProvider is missing')\r\n  return ctx\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,SAASC,kBAAkB,EAAEC,QAAQ,QAAQ,MAAM;AACnD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,SAAS,CAAC;EAKrBC,WAAWA,CAAA,EAAG;IAAA,KAJdC,IAAI;IAAA,KACJC,KAAK;IAAA,KACLC,KAAK;IAGH,IAAI,CAACF,IAAI,GAAG,IAAIP,SAAS,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACQ,KAAK,GAAG,IAAIP,UAAU,CAAC,CAAC;IAC7B,IAAI,CAACQ,KAAK,GAAG,IAAIP,UAAU,CAAC,IAAI,CAACK,IAAI,CAAC;;IAEtC;IACAR,QAAQ,CACN;MAAA,IAAAW,eAAA;MAAA,QAAAA,eAAA,GAAM,IAAI,CAACH,IAAI,CAACI,IAAI,cAAAD,eAAA,uBAAdA,eAAA,CAAgBE,SAAS;IAAA,GAC/B,CAACC,YAAY,EAAEC,YAAY,KAAK;MAC9B,IAAID,YAAY,IAAIA,YAAY,KAAKC,YAAY,IAAI,IAAI,CAACP,IAAI,CAACI,IAAI,EAAE;QACnEI,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACpE,IAAI,CAACP,KAAK,CAACQ,oBAAoB,CAAC,IAAI,CAACV,IAAI,CAACI,IAAI,CAACO,EAAE,EAAEL,YAAY,CAAC;MAClE;IACF,CACF,CAAC;IAEDf,kBAAkB,CAAC,IAAI,CAAC;EAC1B;AACF;AAEA,MAAMqB,gBAAgB,gBAAGvB,aAAa,CAAmB,IAAI,CAAC;AAC9D,MAAMwB,IAAI,GAAG,IAAIf,SAAS,CAAC,CAAC;AAE5B,OAAO,MAAMgB,iBAAoD,GAAGA,CAAC;EAAEC;AAAS,CAAC,kBAC/ElB,OAAA,CAACe,gBAAgB,CAACI,QAAQ;EAACC,KAAK,EAAEJ,IAAK;EAAAE,QAAA,EAAEA;AAAQ;EAAAG,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAA4B,CAC9E;AAAAC,EAAA,GAFYR,iBAAoD;AAIjE,OAAO,MAAMS,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,GAAG,GAAGnC,UAAU,CAACsB,gBAAgB,CAAC;EACxC,IAAI,CAACa,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACzD,OAAOD,GAAG;AACZ,CAAC;AAAAD,EAAA,CAJYD,YAAY;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}